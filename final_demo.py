#!/usr/bin/env python3
"""
–ß–µ—Å—Ç–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç-–±–æ—Ç–∞ –ò–¢–ú–û
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ parsed_programs.json
"""

import json
import os
from final_parser import generate_recommendations, categorize_subjects

def load_parsed_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ parsed_programs.json"""
    try:
        with open('parsed_programs.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª parsed_programs.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python final_parser.py <urls>")
        return None

def simulate_user_interaction(programs_data):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º"""

    print("ü§ñ –°–ò–ú–£–õ–Ø–¶–ò–Ø –†–ï–ê–õ–¨–ù–û–ì–û –î–ò–ê–õ–û–ì–ê –° –ß–ê–¢-–ë–û–¢–û–ú –ò–¢–ú–û")
    print("=" * 60)
    print()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞
    program_names = list(programs_data.keys())
    programs_text = "\n".join([f"     ‚Ä¢ {name}" for name in program_names])

    print("ü§ñ –ë–æ—Ç: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç –ò–¢–ú–û!")
    print("     –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã:")
    print(programs_text)
    print("     –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?")
    print()

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
    print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ Python —Å –æ–ø—ã—Ç–æ–º 3 –≥–æ–¥–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º")
    print()

    # –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    user_background = "–Ø –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ Python —Å –æ–ø—ã—Ç–æ–º 3 –≥–æ–¥–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º"

    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å curriculum –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    program_with_curriculum = None
    for prog_name, prog_data in programs_data.items():
        if 'curriculum' in prog_data and prog_data['curriculum'].get('all_courses'):
            program_with_curriculum = prog_data
            break

    if program_with_curriculum:
        recommendations = generate_recommendations(user_background, program_with_curriculum['curriculum'])

        print("ü§ñ –ë–æ—Ç: –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        print(f"     –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {recommendations.get('user_profile', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
        print("     –¢–µ–ø–µ—Ä—å –º–æ–≥—É –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!")
        print()

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —ç–∫–∑–∞–º–µ–Ω—ã
        print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ö–∞–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã –Ω—É–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å?")
        print()

        # –ë–æ—Ç –∏—â–µ—Ç –≤ FAQ
        for prog_name, prog_data in programs_data.items():
            for faq in prog_data.get('faq', []):
                if '—ç–∫–∑–∞–º–µ–Ω' in faq['question'].lower():
                    answer = faq['answer'][:150] + "..." if len(faq['answer']) > 150 else faq['answer']
                    print(f"ü§ñ –ë–æ—Ç: –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ '{prog_name}':")
                    print(f"     ‚ùì {faq['question']}")
                    print(f"     üí° {answer}")
                    print()
                    break
            break

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º")
        print()

        print("ü§ñ –ë–æ—Ç: –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:")
        for i, rec in enumerate(recommendations.get('recommendations', [])[:3], 1):
            print(f"     {i}. {rec['name']} ({rec['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤)")
            print(f"        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rec['category']}")
            print(f"        –ü—Ä–∏—á–∏–Ω–∞: {rec['reason']}")
        print()

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã
        print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –°—Ä–∞–≤–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –º–µ–Ω—è")
        print()

        print("ü§ñ –ë–æ—Ç: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º:")
        print()

        for i, (prog_name, prog_data) in enumerate(programs_data.items(), 1):
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ñ–∏–ª—é
            match_score = calculate_program_match(user_background, prog_data)

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
            total_courses = len(prog_data.get('curriculum', {}).get('all_courses', []))

            print(f"     {i}. {prog_name}")
            print(f"     ‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é: {match_score}%")
            if total_courses > 0:
                print(f"     ‚Ä¢ –í—Å–µ–≥–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: {total_courses}")
            print(f"     ‚Ä¢ FAQ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(prog_data.get('faq', []))}")

            # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            if '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' in prog_name.lower():
                print("     ‚Ä¢ –§–æ–∫—É—Å: ML Engineering, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
            elif '–ø—Ä–æ–¥—É–∫—Ç' in prog_name.lower():
                print("     ‚Ä¢ –§–æ–∫—É—Å: Product Management, –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã")
            elif '–≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ' in prog_name.lower():
                print("     ‚Ä¢ –§–æ–∫—É—Å: –°–∏—Å—Ç–µ–º–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            print()

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ª—É—á—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        best_program = max(programs_data.items(),
                          key=lambda x: calculate_program_match(user_background, x[1]))
        print(f"     ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {best_program[0]}")
        print()

    else:
        print("ü§ñ –ë–æ—Ç: ‚ùå –î–∞–Ω–Ω—ã–µ –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        print("     –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä —Å URL –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
        print()

def calculate_program_match(background: str, program_data: dict) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    background_lower = background.lower()
    score = 50  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if any(word in background_lower for word in ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'python', '–∫–æ–¥']):
        if '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' in program_data.get('title', '').lower():
            score += 35
        elif '–ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ' in program_data.get('title', '').lower():
            score += 30
        elif '–ø—Ä–æ–¥—É–∫—Ç' in program_data.get('title', '').lower():
            score -= 5

    elif any(word in background_lower for word in ['–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø—Ä–æ–¥—É–∫—Ç', 'product', '–±–∏–∑–Ω–µ—Å']):
        if '–ø—Ä–æ–¥—É–∫—Ç' in program_data.get('title', '').lower():
            score += 35
        elif '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' in program_data.get('title', '').lower():
            score -= 5

    elif any(word in background_lower for word in ['—Å–∏—Å—Ç–µ–º—ã', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 'highload', '–Ω–∞–≥—Ä—É–∑–∫–∞']):
        if '–≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ' in program_data.get('title', '').lower():
            score += 40

    return min(100, max(0, score))

def show_system_stats(programs_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    print()

    total_programs = len(programs_data)
    total_faq = sum(len(prog.get('faq', [])) for prog in programs_data.values())
    total_courses = sum(len(prog.get('curriculum', {}).get('all_courses', []))
                       for prog in programs_data.values())

    print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º: {total_programs}")
    print(f"‚ùì –í—Å–µ–≥–æ FAQ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_faq}")
    print(f"üéì –í—Å–µ–≥–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: {total_courses}")
    print()

    print("üìã –î–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º:")
    for prog_name, prog_data in programs_data.items():
        courses_count = len(prog_data.get('curriculum', {}).get('all_courses', []))
        faq_count = len(prog_data.get('faq', []))

        print(f"‚Ä¢ {prog_name}:")
        print(f"  - –î–∏—Å—Ü–∏–ø–ª–∏–Ω: {courses_count}")
        print(f"  - FAQ: {faq_count}")

        if courses_count > 0:
            curriculum = prog_data['curriculum']
            elective_count = len(curriculum.get('elective_courses', []))
            mandatory_count = len(curriculum.get('mandatory_courses', []))
            print(f"  - –í—ã–±–æ—Ä–Ω—ã—Ö: {elective_count}, –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö: {mandatory_count}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
            categorized = categorize_subjects(curriculum)
            categories_with_courses = {cat: len(courses) for cat, courses in categorized.items() if len(courses) > 0}
            if categories_with_courses:
                print(f"  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join([f'{cat}({count})' for cat, count in categories_with_courses.items()])}")
        print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéì –ß–ï–°–¢–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ß–ê–¢-–ë–û–¢–ê –ò–¢–ú–û")
    print("=" * 60)
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists('parsed_programs.json'):
        print("‚ùå –§–∞–π–ª parsed_programs.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print()
        print("üìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
        print("1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä:")
        print("   python final_parser.py https://abit.itmo.ru/program/master/ai https://abit.itmo.ru/program/master/ai_product")
        print("2. –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–º–æ:")
        print("   python final_demo.py")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    programs_data = load_parsed_data()
    if not programs_data:
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    show_system_stats(programs_data)

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    simulate_user_interaction(programs_data)

    print("=" * 60)
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    print()
    print("üìù –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Telegram:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
    print("2. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –≤ bot.py –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python bot.py")
    print("4. –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram –∏ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å /start")
    print()
    print("üí° –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω—ã –≤ —ç—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏!")

if __name__ == "__main__":
    main()