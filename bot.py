import json
import logging
import re
from typing import Dict, List, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import difflib
from dataclasses import dataclass
from final_parser import generate_recommendations, categorize_subjects, get_profile_examples

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

@dataclass
class UserProfile:
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    background: str = ""  # –ë—ç–∫–≥—Ä–∞—É–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    interests: List[str] = None  # –ò–Ω—Ç–µ—Ä–µ—Å—ã
    experience_level: str = ""  # –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
    preferred_program: str = ""  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

    def __post_init__(self):
        if self.interests is None:
            self.interests = []

class ITMOChatBot:
    def __init__(self, token: str, data_file: str = "parsed_programs.json"):
        self.token = token
        self.data_file = data_file
        self.programs_data = self.load_programs_data()
        self.user_profiles: Dict[int, UserProfile] = {}

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        self.relevant_keywords = {
            # –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ
            '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '–ø–æ—Å—Ç—É–ø–∏—Ç—å', '—ç–∫–∑–∞–º–µ–Ω', '—ç–∫–∑–∞–º–µ–Ω—ã', '–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞', '–æ–±—É—á–µ–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–ø—Ä–æ–≥—Ä–∞–º–º—ã',
            '–¥–∏–ø–ª–æ–º', '—Å—Ç–∏–ø–µ–Ω–¥–∏—è', '–∫–∞—Ä—å–µ—Ä–∞', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—É—á–µ–±–∞', '—É—á–µ–±–Ω—ã–π', '–ø–ª–∞–Ω', '–ø–ª–∞–Ω—ã',
            '–∫—É—Ä—Å', '–∫—É—Ä—Å—ã', '–ø—Ä–µ–¥–º–µ—Ç', '–ø—Ä–µ–¥–º–µ—Ç—ã', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã', '–ø—Ä–æ–µ–∫—Ç', '–ø—Ä–∞–∫—Ç–∏–∫–∞', '—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞',

            # –ü—Ä–æ–≥—Ä–∞–º–º—ã –ò–¢–ú–û
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–∏–∏', 'ai', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'ml', '–ø—Ä–æ–¥—É–∫—Ç', '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π',
            '–≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ', '—Å–∏—Å—Ç–µ–º—ã', 'highload', '–ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ', '–ø–æ',

            # –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
            '–∏—Ç–º–æ', 'itmo', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–≤—É–∑', '–∏–Ω—Å—Ç–∏—Ç—É—Ç',

            # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –æ–±—É—á–µ–Ω–∏–∏
            '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏', '—á—Ç–æ –∏–∑—É—á–∞—é—Ç', '—á—Ç–æ –∏–∑—É—á–∞–µ—Ç—Å—è', '—á–µ–º—É —É—á–∞—Ç', '—á–µ–º—É –æ–±—É—á–∞—é—Ç',
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '—Å–∫–æ–ª—å–∫–æ', '–º–µ—Å—Ç–∞', '–º–µ—Å—Ç', '–±—é–¥–∂–µ—Ç', '–±—é–¥–∂–µ—Ç–Ω—ã–µ', '–ø–ª–∞—Ç–Ω—ã–µ',
            '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ü–µ–Ω–∞', '–æ–ø–ª–∞—Ç–∞', '—Å—Ç–æ–∏—Ç', '—Å—Ç–æ–∏–º–æ—Å—Ç–∏',
            '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', '—É—Å–ª–æ–≤–∏—è', '–∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å', '–¥–æ–∫—É–º–µ–Ω—Ç—ã',
            '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Å—Ä–æ–∫', '–≥–æ–¥–∞', '–ª–µ—Ç', '—Å–µ–º–µ—Å—Ç—Ä', '—Å–µ–º–µ—Å—Ç—Ä—ã',
            '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', '–∫–∞—Ñ–µ–¥—Ä–∞', '—Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            '–≤—ã–ø—É—Å–∫–Ω–∏–∫–∏', '—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞'
        }

    def load_programs_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {self.data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python final_parser.py <urls>")
            return {}
        except json.JSONDecodeError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON –∏–∑ {self.data_file}")
            return {}

    def is_relevant_question(self, question: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –¥–ª—è –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º"""
        question_lower = question.lower()
        return any(keyword in question_lower for keyword in self.relevant_keywords)

    def find_best_answer(self, question: str) -> Optional[Dict[str, str]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
        if not self.is_relevant_question(question):
            return None

        question_lower = question.lower()
        best_match = None
        best_score = 0

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
        question_words = set(question_lower.split())

        for program_name, program_data in self.programs_data.items():
            if 'faq' not in program_data:
                continue

            for faq_item in program_data['faq']:
                faq_question = faq_item['question'].lower()
                faq_answer = faq_item['answer'].lower()
                faq_words = set(faq_question.split())

                # 1. –ë–∞–∑–æ–≤–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
                similarity = difflib.SequenceMatcher(None, question_lower, faq_question).ratio()

                # 2. –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö
                common_words = question_words.intersection(faq_words)
                word_overlap = len(common_words) / max(len(question_words), 1)

                # 3. –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ (–¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞)
                answer_matches = sum(1 for word in question_words if word in faq_answer)
                answer_score = answer_matches / max(len(question_words), 1)

                # 4. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ –≤–∞–∂–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                bonus = 0

                # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–ª–æ–≤
                important_words = {'—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–º–µ—Å—Ç–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '—ç–∫–∑–∞–º–µ–Ω'}
                for word in important_words:
                    if word in question_lower and word in faq_question:
                        bonus += 0.2

                # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
                question_types = {
                    '—á—Ç–æ': ['—á—Ç–æ', '–∫–∞–∫–æ–µ', '–∫–∞–∫–∞—è', '–∫–∞–∫–∏–µ'],
                    '—Å–∫–æ–ª—å–∫–æ': ['—Å–∫–æ–ª—å–∫–æ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
                    '–∫–∞–∫': ['–∫–∞–∫', '–∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º'],
                    '–∫–æ–≥–¥–∞': ['–∫–æ–≥–¥–∞', '—Å—Ä–æ–∫', '–≤—Ä–µ–º—è']
                }

                for q_type, variants in question_types.items():
                    if any(v in question_lower for v in variants) and any(v in faq_question for v in variants):
                        bonus += 0.15

                # –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä —Å –≤–µ—Å–∞–º–∏
                total_score = (
                    similarity * 0.4 +           # –°—Ö–æ–¥—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
                    word_overlap * 0.3 +         # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö
                    answer_score * 0.2 +         # –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
                    bonus                        # –ë–æ–Ω—É—Å—ã
                )

                # –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
                if total_score > best_score and total_score > 0.2:
                    best_score = total_score
                    best_match = {
                        'question': faq_item['question'],
                        'answer': faq_item['answer'],
                        'program': program_name,
                        'score': total_score,
                        'matched_words': list(common_words)
                    }

        return best_match

    def get_program_comparison(self, user_id: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º"""
        if not self.programs_data:
            return "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python final_parser.py <urls>"

        profile = self.user_profiles.get(user_id, UserProfile())

        comparison = f"üîç **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ò–¢–ú–û:**\n\n"

        programs = list(self.programs_data.items())

        for i, (prog_name, prog_data) in enumerate(programs, 1):
            comparison += f"**{i}. {prog_name}**\n"
            comparison += f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {prog_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:100]}...\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –µ—Å–ª–∏ –µ—Å—Ç—å curriculum
            if 'curriculum' in prog_data and prog_data['curriculum'].get('all_courses'):
                total_courses = len(prog_data['curriculum']['all_courses'])
                elective_courses = len(prog_data['curriculum']['elective_courses'])
                comparison += f"‚Ä¢ –í—Å–µ–≥–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: {total_courses} (–≤—ã–±–æ—Ä–Ω—ã—Ö: {elective_courses})\n"

            comparison += f"‚Ä¢ FAQ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(prog_data.get('faq', []))}\n"

            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            if profile.background:
                match_score = self.calculate_program_match(profile.background, prog_data)
                comparison += f"‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é: {match_score}%\n"

            comparison += "\n"

        if profile.background:
            comparison += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ**\n"
        else:
            comparison += "üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å (/profile) –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"

        return comparison

    def calculate_program_match(self, background: str, program_data: Dict) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (0-100%)"""
        background_lower = background.lower()
        score = 50  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        description = program_data.get('description', '').lower()

        # –ë–æ–Ω—É—Å—ã –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if any(word in background_lower for word in ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'python', '–∫–æ–¥']):
            if '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' in program_data.get('title', '').lower():
                score += 35
            elif '–ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ' in program_data.get('title', '').lower():
                score += 30
            elif '–ø—Ä–æ–¥—É–∫—Ç' in program_data.get('title', '').lower():
                score -= 5

        elif any(word in background_lower for word in ['–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø—Ä–æ–¥—É–∫—Ç', 'product', '–±–∏–∑–Ω–µ—Å']):
            if '–ø—Ä–æ–¥—É–∫—Ç' in program_data.get('title', '').lower():
                score += 35
            elif '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' in program_data.get('title', '').lower():
                score -= 5

        elif any(word in background_lower for word in ['—Å–∏—Å—Ç–µ–º—ã', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 'highload', '–Ω–∞–≥—Ä—É–∑–∫–∞']):
            if '–≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ' in program_data.get('title', '').lower():
                score += 40

        return min(100, max(0, score))

    def get_recommendations(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        profile = self.user_profiles.get(user_id, UserProfile())

        if not profile.background:
            return ("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                   "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –±—ç–∫–≥—Ä–∞—É–Ω–¥–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /profile")

        recommendations = f"üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:*\n\n"

        # –ò—â–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å curriculum –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        program_with_curriculum = None
        for prog_name, prog_data in self.programs_data.items():
            if 'curriculum' in prog_data and prog_data['curriculum'].get('all_courses'):
                program_with_curriculum = prog_data
                break

        if program_with_curriculum:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ final_parser.py
            try:
                recs = generate_recommendations(profile.background, program_with_curriculum['curriculum'])

                recommendations += f"üë§ *–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:* {recs.get('user_profile', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                matched_keywords = recs.get('matched_keywords', [])
                if matched_keywords:
                    keywords_text = ', '.join(matched_keywords[:5])
                    recommendations += f"üîç *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:* {keywords_text}\n"

                recommendations += "\n"

                recommendations += "üìö *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:*\n"
                for i, rec in enumerate(recs.get('recommendations', [])[:8], 1):
                    priority_icon = "‚≠ê" if rec.get('priority', 0) >= 3 else "üìñ"
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
                    course_name = rec['name'].replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)')
                    recommendations += f"{i}. {priority_icon} *{course_name}* ({rec['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤)\n"
                    recommendations += f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rec['category']}\n"
                    recommendations += f"   üí° {rec['reason']}\n\n"

                # –ê–Ω–∞–ª–∏–∑ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                analysis = recs.get('analysis', {})
                if analysis:
                    recommendations += "üìä *–ê–Ω–∞–ª–∏–∑ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞:*\n"
                    recommendations += f"‚Ä¢ –í—Å–µ–≥–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: {analysis.get('total_courses', 0)}\n"
                    recommendations += f"‚Ä¢ –í—ã–±–æ—Ä–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: {analysis.get('elective_courses', 0)}\n"
                    recommendations += f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {analysis.get('categories_found', 0)}\n\n"

                # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                cat_dist = recs.get('category_distribution', {})
                if cat_dist:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
                    sorted_categories = sorted(cat_dist.items(), key=lambda x: x[1], reverse=True)
                    top_categories = [f"{cat}: {count}" for cat, count in sorted_categories[:5] if count > 0]
                    if top_categories:
                        recommendations += "üèÜ *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω:*\n"
                        recommendations += f"‚Ä¢ {' ‚Ä¢ '.join(top_categories)}\n"

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
                recommendations += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            recommendations += "‚ùå –î–∞–Ω–Ω—ã–µ –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä —Å URL –ø—Ä–æ–≥—Ä–∞–º–º."

        return recommendations

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üîç –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="compare")],
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
            [InlineKeyboardButton("üë§ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="setup_profile")],
            [InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º
        program_names = list(self.programs_data.keys()) if self.programs_data else ["–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"]
        programs_text = "\n".join([f"‚Ä¢ {name}" for name in program_names])

        welcome_text = (
            "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç –ò–¢–ú–û!**\n\n"
            f"–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã:\n{programs_text}\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?"
        )

        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == "compare":
            comparison = self.get_program_comparison(query.from_user.id)
            await query.edit_message_text(comparison, parse_mode='Markdown')

        elif query.data == "ask_question":
            await query.edit_message_text(
                "‚ùì **–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ò–¢–ú–û:**\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã –Ω—É–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å?\n"
                "‚Ä¢ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏?\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
                parse_mode='Markdown'
            )

        elif query.data == "setup_profile":
            examples_text = get_profile_examples()
            profile_message = (
                "üë§ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
                "**–ö–æ–º–∞–Ω–¥–∞:** `/profile –≤–∞—à_–±—ç–∫–≥—Ä–∞—É–Ω–¥`\n\n"
                f"{examples_text}"
            )
            await query.edit_message_text(profile_message, parse_mode='Markdown')

        elif query.data == "get_recommendations":
            recommendations = self.get_recommendations(query.from_user.id)
            await query.edit_message_text(recommendations, parse_mode='Markdown')

    async def profile_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
        user_id = update.effective_user.id

        if not context.args:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—ç–∫–≥—Ä–∞—É–Ω–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/profile –Ø –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ Python —Å –æ–ø—ã—Ç–æ–º 3 –≥–æ–¥–∞`",
                parse_mode='Markdown'
            )
            return

        background = " ".join(context.args)

        if user_id not in self.user_profiles:
            self.user_profiles[user_id] = UserProfile()

        self.user_profiles[user_id].background = background

        await update.message.reply_text(
            f"‚úÖ **–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            f"–í–∞—à –±—ç–∫–≥—Ä–∞—É–Ω–¥: {background}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /recommendations",
            parse_mode='Markdown'
        )

    async def recommendations_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommendations"""
        recommendations = self.get_recommendations(update.effective_user.id)
        await update.message.reply_text(recommendations, parse_mode='Markdown')

    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
        question = update.message.text

        if not self.is_relevant_question(question):
            await update.message.reply_text(
                "üö´ **–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –ò–¢–ú–û.**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ:\n"
                "‚Ä¢ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ö\n"
                "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º\n"
                "‚Ä¢ –ö–∞—Ä—å–µ—Ä–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö\n"
                "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö\n"
                "‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö –æ–±—É—á–µ–Ω–∏—è",
                parse_mode='Markdown'
            )
            return

        answer_data = self.find_best_answer(question)

        if answer_data:
            response = f"üí° **–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω** (–ø—Ä–æ–≥—Ä–∞–º–º–∞: {answer_data['program']}):\n\n"
            response += f"**–í–æ–ø—Ä–æ—Å:** {answer_data['question']}\n\n"
            response += f"**–û—Ç–≤–µ—Ç:** {answer_data['answer']}\n\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–≤—à–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            matched_words = answer_data.get('matched_words', [])
            if matched_words:
                response += f"üîç **–°–æ–≤–ø–∞–≤—à–∏–µ —Å–ª–æ–≤–∞:** {', '.join(matched_words[:5])}\n"

            response += f"_–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {answer_data['score']:.2f}_"
        else:
            response = (
                "ü§î **–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∞, –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç, —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
                "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã'\n"
                "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /profile\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
                "‚Ä¢ '–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ò–ò?'\n"
                "‚Ä¢ '–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è?'\n"
                "‚Ä¢ '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'\n\n"
                "–ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ø—Ä–æ–≥—Ä–∞–º–º –ò–¢–ú–û"
            )

        await update.message.reply_text(response, parse_mode='Markdown')

    async def help_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        program_count = len(self.programs_data)
        programs_list = "\n".join([f"‚Ä¢ {name}" for name in self.programs_data.keys()]) if self.programs_data else "‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"

        help_text = (
            "üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ `/profile <–≤–∞—à_–±—ç–∫–≥—Ä–∞—É–Ω–¥>` - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚Ä¢ `/recommendations` - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã\n"
            "‚Ä¢ ‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏–∏\n"
            "‚Ä¢ üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω\n"
            "‚Ä¢ üìö –ê–Ω–∞–ª–∏–∑ —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤\n\n"
            f"**–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º: {program_count}**\n"
            f"{programs_list}\n\n"
            "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!"
        )

        await update.message.reply_text(help_text, parse_mode='Markdown')

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω!")
            return

        if not self.programs_data:
            logger.error("–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python final_parser.py <urls>")
            return

        application = Application.builder().token(self.token).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_handler))
        application.add_handler(CommandHandler("profile", self.profile_handler))
        application.add_handler(CommandHandler("recommendations", self.recommendations_handler))
        application.add_handler(CallbackQueryHandler(self.button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handler))

        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º: {len(self.programs_data)}")
        application.run_polling()

if __name__ == "__main__":
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    BOT_TOKEN = "8268067812:AAHBkAbew6jPzAbhdOSEQGWMzNiCRxcCFbA"

    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ö†Ô∏è  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN")
        print("–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ —É @BotFather –≤ Telegram")
        print("\nüìã –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:")
        print("1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä: python final_parser.py https://abit.itmo.ru/program/master/ai https://abit.itmo.ru/program/master/ai_product")
        print("2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
        print("3. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python bot.py")
    else:
        bot = ITMOChatBot(BOT_TOKEN)
        bot.run()