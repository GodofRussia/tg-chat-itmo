#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
"""

import json
from bot import ITMOChatBot

def test_qa_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É Q&A —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    bot = ITMOChatBot("test_token")

    if not bot.programs_data:
        print("‚ùå –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return

    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç?",
        "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∫–∞–∫–æ–µ?",
        "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º",
        "–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ò–ò?",
        "–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è?",
        "–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É?",
        "–ö–∞–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã –Ω—É–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å?",
        "–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ?",
        "–ß—Ç–æ –∏–∑—É—á–∞—é—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ?",
        "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é?",
        "–ï—Å—Ç—å –ª–∏ –±—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞?",
        "–ö—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–µ—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ?",
        "–ö–∞–∫–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏?",
        "–°—Ç–∏–ø–µ–Ω–¥–∏—è –µ—Å—Ç—å?",
        "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
        "–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞?"  # –ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    ]

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º: {len(bot.programs_data)}")

    total_faq = sum(len(prog.get('faq', [])) for prog in bot.programs_data.values())
    print(f"‚ùì –í—Å–µ–≥–æ FAQ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_faq}")
    print("=" * 80)

    relevant_count = 0
    answered_count = 0

    for i, question in enumerate(test_questions, 1):
        print(f"\n{i}. ü§î **–í–æ–ø—Ä–æ—Å:** {question}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        is_relevant = bot.is_relevant_question(question)
        print(f"   üéØ **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π:** {'‚úÖ –î–∞' if is_relevant else '‚ùå –ù–µ—Ç'}")

        if is_relevant:
            relevant_count += 1

            # –ò—â–µ–º –æ—Ç–≤–µ—Ç
            answer = bot.find_best_answer(question)
            if answer:
                answered_count += 1
                print(f"   üí° **–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω:** ‚úÖ –î–∞ (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {answer['score']:.2f})")
                print(f"   üìã **–ü—Ä–æ–≥—Ä–∞–º–º–∞:** {answer['program']}")
                print(f"   ‚ùì **–ü–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å:** {answer['question'][:100]}...")

                matched_words = answer.get('matched_words', [])
                if matched_words:
                    print(f"   üîç **–°–æ–≤–ø–∞–≤—à–∏–µ —Å–ª–æ–≤–∞:** {', '.join(matched_words[:5])}")

                print(f"   üìù **–û—Ç–≤–µ—Ç:** {answer['answer'][:150]}...")
            else:
                print(f"   üí° **–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω:** ‚ùå –ù–µ—Ç")

        print("-" * 60)

    print(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test_questions)}")
    print(f"‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {relevant_count} ({relevant_count/len(test_questions)*100:.1f}%)")
    print(f"‚Ä¢ –° –æ—Ç–≤–µ—Ç–∞–º–∏: {answered_count} ({answered_count/relevant_count*100:.1f}% –æ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö)" if relevant_count > 0 else "‚Ä¢ –° –æ—Ç–≤–µ—Ç–∞–º–∏: 0")
    print(f"‚Ä¢ –û–±—â–∏–π —É—Å–ø–µ—Ö: {answered_count/len(test_questions)*100:.1f}%")

if __name__ == "__main__":
    test_qa_system()