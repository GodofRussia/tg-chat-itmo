#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""

import json
from final_parser import generate_recommendations

def test_recommendations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        with open('parsed_programs.json', 'r', encoding='utf-8') as f:
            programs_data = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª parsed_programs.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–µ—Ä.")
        return

    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å curriculum
    program_with_curriculum = None
    for prog_name, prog_data in programs_data.items():
        if 'curriculum' in prog_data and prog_data['curriculum'].get('all_courses'):
            program_with_curriculum = prog_data
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É: {prog_name}")
            break

    if not program_with_curriculum:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å —É—á–µ–±–Ω—ã–º –ø–ª–∞–Ω–æ–º")
        return

    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
    test_profiles = [
        {
            'name': 'Fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –Ø–Ω–¥–µ–∫—Å–∞',
            'description': '–Ø —Ñ—É–ª–ª—Å—Ç–µ–∫ –∏–∑ –Ø–Ω–¥–µ–∫—Å–∞, –æ–ø—ã—Ç 2 –≥–æ–¥–∞, –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∑–Ω–∞—é –ø—Ä–æ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. –£–º–µ—é –ø–∏—Å–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥, –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É'
        },
        {
            'name': 'ML Engineer',
            'description': '–†–∞–±–æ—Ç–∞—é ML engineer –≤ —Å—Ç–∞—Ä—Ç–∞–ø–µ, –∑–∞–Ω–∏–º–∞—é—Å—å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏'
        },
        {
            'name': 'Data Scientist',
            'description': 'Data scientist —Å –æ–ø—ã—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        },
        {
            'name': 'Product Manager',
            'description': 'Product manager, —Ö–æ—á—É –∏–∑—É—á–∏—Ç—å AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤'
        },
        {
            'name': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
            'description': '–ü—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏'
        }
    ]

    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    print(f"üìä –í—Å–µ–≥–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {len(program_with_curriculum['curriculum']['all_courses'])}")
    print(f"üìö –í—ã–±–æ—Ä–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: {len(program_with_curriculum['curriculum']['elective_courses'])}")
    print("=" * 80)

    for profile in test_profiles:
        print(f"\nüë§ **–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å: {profile['name']}**")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {profile['description']}")
        print("-" * 60)

        try:
            recommendations = generate_recommendations(
                profile['description'],
                program_with_curriculum['curriculum']
            )

            print(f"üéØ **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:** {recommendations.get('user_profile', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")

            matched_keywords = recommendations.get('matched_keywords', [])
            if matched_keywords:
                print(f"üîç **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(matched_keywords[:8])}")

            print(f"\nüìö **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (—Ç–æ–ø-5):**")
            for i, rec in enumerate(recommendations.get('recommendations', [])[:5], 1):
                priority_icon = "‚≠ê" if rec.get('priority', 0) >= 3 else "üìñ"
                print(f"{i}. {priority_icon} **{rec['name']}** ({rec['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤)")
                print(f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rec['category']}")
                print(f"   üí° {rec['reason']}")
                print()

            # –ê–Ω–∞–ª–∏–∑
            analysis = recommendations.get('analysis', {})
            if analysis:
                print(f"üìä **–ê–Ω–∞–ª–∏–∑:** {analysis.get('categories_found', 0)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω–æ")

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            cat_dist = recommendations.get('category_distribution', {})
            if cat_dist:
                sorted_categories = sorted(cat_dist.items(), key=lambda x: x[1], reverse=True)
                top_categories = [f"{cat}: {count}" for cat, count in sorted_categories[:4] if count > 0]
                if top_categories:
                    print(f"üèÜ **–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:** {' ‚Ä¢ '.join(top_categories)}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")

        print("=" * 80)

if __name__ == "__main__":
    test_recommendations()